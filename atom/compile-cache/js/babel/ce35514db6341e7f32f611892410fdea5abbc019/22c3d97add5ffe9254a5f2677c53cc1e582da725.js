var _this = this;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/* eslint-disable no-underscore-dangle */

var _libScriptOptions = require('../lib/script-options');

var _libScriptOptions2 = _interopRequireDefault(_libScriptOptions);

'use babel';

describe('ScriptOptions', function () {
  beforeEach(function () {
    _this.scriptOptions = new _libScriptOptions2['default']();
    _this.dummyEnv = {
      SCRIPT_CI: 'true',
      SCRIPT_ENV: 'test',
      _NUMBERS: '123'
    };
    _this.dummyEnvString = "SCRIPT_CI=true;SCRIPT_ENV='test';_NUMBERS=\"123\"";
  });

  describe('getEnv', function () {
    it('should default to an empty env object', function () {
      var env = _this.scriptOptions.getEnv();
      expect(env).toEqual({});
    });

    it('should parse a custom user environment', function () {
      _this.scriptOptions.env = _this.dummyEnvString;
      var env = _this.scriptOptions.getEnv();
      expect(env).toEqual(_this.dummyEnv);
    });
  });

  describe('mergedEnv', function () {
    it('should default to the orignal env object', function () {
      var mergedEnv = _this.scriptOptions.mergedEnv(_this.dummyEnv);
      expect(mergedEnv).toEqual(_this.dummyEnv);
    });

    it('should retain the original environment', function () {
      _this.scriptOptions.env = "TEST_VAR_1=one;TEST_VAR_2=\"two\";TEST_VAR_3='three'";
      var mergedEnv = _this.scriptOptions.mergedEnv(_this.dummyEnv);
      expect(mergedEnv.SCRIPT_CI).toEqual('true');
      expect(mergedEnv.SCRIPT_ENV).toEqual('test');
      expect(mergedEnv._NUMBERS).toEqual('123');
      expect(mergedEnv.TEST_VAR_1).toEqual('one');
      expect(mergedEnv.TEST_VAR_2).toEqual('two');
      expect(mergedEnv.TEST_VAR_3).toEqual('three');
    });

    it('should support special character values', function () {
      _this.scriptOptions.env = "TEST_VAR_1=o-n-e;TEST_VAR_2=\"nested\\\"doublequotes\\\"\";TEST_VAR_3='nested\\'singlequotes\\'';TEST_VAR_4='s p a c e s'";
      var mergedEnv = _this.scriptOptions.mergedEnv(_this.dummyEnv);
      expect(mergedEnv.TEST_VAR_1).toEqual('o-n-e');
      expect(mergedEnv.TEST_VAR_2).toEqual('nested\\"doublequotes\\"');
      expect(mergedEnv.TEST_VAR_3).toEqual("nested\\'singlequotes\\'");
      expect(mergedEnv.TEST_VAR_4).toEqual('s p a c e s');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYXBpZXIvLmF0b20vcGFja2FnZXMvc2NyaXB0L3NwZWMvc2NyaXB0LW9wdGlvbnMtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Z0NBRzBCLHVCQUF1Qjs7OztBQUhqRCxXQUFXLENBQUM7O0FBS1osUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0FBQzlCLFlBQVUsQ0FBQyxZQUFNO0FBQ2YsVUFBSyxhQUFhLEdBQUcsbUNBQW1CLENBQUM7QUFDekMsVUFBSyxRQUFRLEdBQUc7QUFDZCxlQUFTLEVBQUUsTUFBTTtBQUNqQixnQkFBVSxFQUFFLE1BQU07QUFDbEIsY0FBUSxFQUFFLEtBQUs7S0FDaEIsQ0FBQztBQUNGLFVBQUssY0FBYyxHQUFHLG1EQUFtRCxDQUFDO0dBQzNFLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07QUFDdkIsTUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07QUFDaEQsVUFBTSxHQUFHLEdBQUcsTUFBSyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDeEMsWUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN6QixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07QUFDakQsWUFBSyxhQUFhLENBQUMsR0FBRyxHQUFHLE1BQUssY0FBYyxDQUFDO0FBQzdDLFVBQU0sR0FBRyxHQUFHLE1BQUssYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3hDLFlBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBSyxRQUFRLENBQUMsQ0FBQztLQUNwQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLFdBQVcsRUFBRSxZQUFNO0FBQzFCLE1BQUUsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0FBQ25ELFVBQU0sU0FBUyxHQUFHLE1BQUssYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFLLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFlBQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBSyxRQUFRLENBQUMsQ0FBQztLQUMxQyxDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07QUFDakQsWUFBSyxhQUFhLENBQUMsR0FBRyxHQUFHLHNEQUFzRCxDQUFDO0FBQ2hGLFVBQU0sU0FBUyxHQUFHLE1BQUssYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFLLFFBQVEsQ0FBQyxDQUFDO0FBQzlELFlBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLFlBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLFlBQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFlBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLFlBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzVDLFlBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9DLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMseUNBQXlDLEVBQUUsWUFBTTtBQUNsRCxZQUFLLGFBQWEsQ0FBQyxHQUFHLEdBQUcsMkhBQTJILENBQUM7QUFDckosVUFBTSxTQUFTLEdBQUcsTUFBSyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQUssUUFBUSxDQUFDLENBQUM7QUFDOUQsWUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsWUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUNqRSxZQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ2pFLFlBQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3JELENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbGFwaWVyLy5hdG9tL3BhY2thZ2VzL3NjcmlwdC9zcGVjL3NjcmlwdC1vcHRpb25zLXNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBTY3JpcHRPcHRpb25zIGZyb20gJy4uL2xpYi9zY3JpcHQtb3B0aW9ucyc7XG5cbmRlc2NyaWJlKCdTY3JpcHRPcHRpb25zJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0aGlzLnNjcmlwdE9wdGlvbnMgPSBuZXcgU2NyaXB0T3B0aW9ucygpO1xuICAgIHRoaXMuZHVtbXlFbnYgPSB7XG4gICAgICBTQ1JJUFRfQ0k6ICd0cnVlJyxcbiAgICAgIFNDUklQVF9FTlY6ICd0ZXN0JyxcbiAgICAgIF9OVU1CRVJTOiAnMTIzJyxcbiAgICB9O1xuICAgIHRoaXMuZHVtbXlFbnZTdHJpbmcgPSBcIlNDUklQVF9DST10cnVlO1NDUklQVF9FTlY9J3Rlc3QnO19OVU1CRVJTPVxcXCIxMjNcXFwiXCI7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRFbnYnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBkZWZhdWx0IHRvIGFuIGVtcHR5IGVudiBvYmplY3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlbnYgPSB0aGlzLnNjcmlwdE9wdGlvbnMuZ2V0RW52KCk7XG4gICAgICBleHBlY3QoZW52KS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcGFyc2UgYSBjdXN0b20gdXNlciBlbnZpcm9ubWVudCcsICgpID0+IHtcbiAgICAgIHRoaXMuc2NyaXB0T3B0aW9ucy5lbnYgPSB0aGlzLmR1bW15RW52U3RyaW5nO1xuICAgICAgY29uc3QgZW52ID0gdGhpcy5zY3JpcHRPcHRpb25zLmdldEVudigpO1xuICAgICAgZXhwZWN0KGVudikudG9FcXVhbCh0aGlzLmR1bW15RW52KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ21lcmdlZEVudicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRlZmF1bHQgdG8gdGhlIG9yaWduYWwgZW52IG9iamVjdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lcmdlZEVudiA9IHRoaXMuc2NyaXB0T3B0aW9ucy5tZXJnZWRFbnYodGhpcy5kdW1teUVudik7XG4gICAgICBleHBlY3QobWVyZ2VkRW52KS50b0VxdWFsKHRoaXMuZHVtbXlFbnYpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXRhaW4gdGhlIG9yaWdpbmFsIGVudmlyb25tZW50JywgKCkgPT4ge1xuICAgICAgdGhpcy5zY3JpcHRPcHRpb25zLmVudiA9IFwiVEVTVF9WQVJfMT1vbmU7VEVTVF9WQVJfMj1cXFwidHdvXFxcIjtURVNUX1ZBUl8zPSd0aHJlZSdcIjtcbiAgICAgIGNvbnN0IG1lcmdlZEVudiA9IHRoaXMuc2NyaXB0T3B0aW9ucy5tZXJnZWRFbnYodGhpcy5kdW1teUVudik7XG4gICAgICBleHBlY3QobWVyZ2VkRW52LlNDUklQVF9DSSkudG9FcXVhbCgndHJ1ZScpO1xuICAgICAgZXhwZWN0KG1lcmdlZEVudi5TQ1JJUFRfRU5WKS50b0VxdWFsKCd0ZXN0Jyk7XG4gICAgICBleHBlY3QobWVyZ2VkRW52Ll9OVU1CRVJTKS50b0VxdWFsKCcxMjMnKTtcbiAgICAgIGV4cGVjdChtZXJnZWRFbnYuVEVTVF9WQVJfMSkudG9FcXVhbCgnb25lJyk7XG4gICAgICBleHBlY3QobWVyZ2VkRW52LlRFU1RfVkFSXzIpLnRvRXF1YWwoJ3R3bycpO1xuICAgICAgZXhwZWN0KG1lcmdlZEVudi5URVNUX1ZBUl8zKS50b0VxdWFsKCd0aHJlZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzdXBwb3J0IHNwZWNpYWwgY2hhcmFjdGVyIHZhbHVlcycsICgpID0+IHtcbiAgICAgIHRoaXMuc2NyaXB0T3B0aW9ucy5lbnYgPSBcIlRFU1RfVkFSXzE9by1uLWU7VEVTVF9WQVJfMj1cXFwibmVzdGVkXFxcXFxcXCJkb3VibGVxdW90ZXNcXFxcXFxcIlxcXCI7VEVTVF9WQVJfMz0nbmVzdGVkXFxcXCdzaW5nbGVxdW90ZXNcXFxcJyc7VEVTVF9WQVJfND0ncyBwIGEgYyBlIHMnXCI7XG4gICAgICBjb25zdCBtZXJnZWRFbnYgPSB0aGlzLnNjcmlwdE9wdGlvbnMubWVyZ2VkRW52KHRoaXMuZHVtbXlFbnYpO1xuICAgICAgZXhwZWN0KG1lcmdlZEVudi5URVNUX1ZBUl8xKS50b0VxdWFsKCdvLW4tZScpO1xuICAgICAgZXhwZWN0KG1lcmdlZEVudi5URVNUX1ZBUl8yKS50b0VxdWFsKCduZXN0ZWRcXFxcXCJkb3VibGVxdW90ZXNcXFxcXCInKTtcbiAgICAgIGV4cGVjdChtZXJnZWRFbnYuVEVTVF9WQVJfMykudG9FcXVhbChcIm5lc3RlZFxcXFwnc2luZ2xlcXVvdGVzXFxcXCdcIik7XG4gICAgICBleHBlY3QobWVyZ2VkRW52LlRFU1RfVkFSXzQpLnRvRXF1YWwoJ3MgcCBhIGMgZSBzJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=