'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

exports['default'] = {
  config: require('./config'),

  activate: function activate() {
    var _this = this;

    if (!/^win/.test(process.platform)) {
      // Manually append /usr/local/bin as it may not be set on some systems,
      // and it's common to have node installed here. Keep it at end so it won't
      // accidentially override any other node installation

      // Note: This should probably be removed in a end-user friendly way...
      process.env.PATH += ':/usr/local/bin';
    }

    require('atom-package-deps').install('build');

    this.tools = [require('./atom-build')];
    this.linter = null;

    this.setupTargetManager();
    this.setupBuildView();
    this.setupErrorMatcher();

    atom.commands.add('atom-workspace', 'build:trigger', function () {
      return _this.build('trigger');
    });
    atom.commands.add('atom-workspace', 'build:stop', function () {
      return _this.stop();
    });
    atom.commands.add('atom-workspace', 'build:confirm', function () {
      require('./google-analytics').sendEvent('build', 'confirmed');
      document.activeElement.click();
    });
    atom.commands.add('atom-workspace', 'build:no-confirm', function () {
      if (_this.saveConfirmView) {
        require('./google-analytics').sendEvent('build', 'not confirmed');
        _this.saveConfirmView.cancel();
      }
    });

    atom.workspace.observeTextEditors(function (editor) {
      editor.onDidSave(function () {
        if (atom.config.get('build.buildOnSave')) {
          _this.build('save');
        }
      });
    });

    atom.workspace.onDidChangeActivePaneItem(function () {
      return _this.updateStatusBar();
    });
    atom.packages.onDidActivateInitialPackages(function () {
      return _this.targetManager.refreshTargets();
    });
  },

  setupTargetManager: function setupTargetManager() {
    var _this2 = this;

    var TargetManager = require('./target-manager');
    this.targetManager = new TargetManager();
    this.targetManager.setTools(this.tools);
    this.targetManager.on('refresh-complete', function () {
      _this2.updateStatusBar();
    });
    this.targetManager.on('new-active-target', function (path, target) {
      _this2.updateStatusBar();

      if (atom.config.get('build.selectTriggers')) {
        _this2.build('trigger');
      }
    });
    this.targetManager.on('trigger', function (atomCommandName) {
      return _this2.build('trigger', atomCommandName);
    });
  },

  setupBuildView: function setupBuildView() {
    var BuildView = require('./build-view');
    this.buildView = new BuildView();
  },

  setupErrorMatcher: function setupErrorMatcher() {
    var _this3 = this;

    var ErrorMatcher = require('./error-matcher');
    this.errorMatcher = new ErrorMatcher();
    this.errorMatcher.on('error', function (message) {
      atom.notifications.addError('Error matching failed!', { detail: message });
    });
    this.errorMatcher.on('matched', function (match) {
      match[0] && _this3.buildView.scrollTo(match[0]);
    });
  },

  deactivate: function deactivate() {
    if (this.child) {
      this.child.removeAllListeners();
      require('tree-kill')(this.child.pid, 'SIGKILL');
      this.child = null;
    }

    this.statusBarView && this.statusBarView.destroy();
    this.buildView && this.buildView.destroy();
    this.saveConfirmView && this.saveConfirmView.destroy();
    this.linter && this.linter.destroy();
    this.targetManager.destroy();

    clearTimeout(this.finishedTimer);
  },

  updateStatusBar: function updateStatusBar() {
    var path = require('./utils').activePath();
    var activeTarget = this.targetManager.getActiveTarget(path);
    this.statusBarView && activeTarget && this.statusBarView.setTarget(activeTarget.name);
  },

  startNewBuild: function startNewBuild(source, atomCommandName) {
    var _this4 = this;

    var BuildError = require('./build-error');
    var path = require('./utils').activePath();
    var buildTitle = '';
    this.linter && this.linter.clear();

    Promise.resolve(this.targetManager.getTargets(path)).then(function (targets) {
      if (!targets || 0 === targets.length) {
        throw new BuildError('No eligible build target.', 'No configuration to build this project exists.');
      }

      var target = targets.find(function (t) {
        return t.atomCommandName === atomCommandName;
      });
      if (!target) {
        target = _this4.targetManager.getActiveTarget(path);
      }
      require('./google-analytics').sendEvent('build', 'triggered');

      if (!target.exec) {
        throw new BuildError('Invalid build file.', 'No executable command specified.');
      }

      _this4.statusBarView && _this4.statusBarView.buildStarted();
      _this4.busyRegistry && _this4.busyRegistry.begin('build.' + target.name, '' + target.name);
      _this4.buildView.buildStarted();
      _this4.buildView.setHeading('Running preBuild...');

      return Promise.resolve(target.preBuild ? target.preBuild() : null).then(function () {
        return target;
      });
    }).then(function (target) {
      var replace = require('./utils').replace;
      var env = Object.assign({}, process.env, target.env);
      Object.keys(env).forEach(function (key) {
        env[key] = replace(env[key], target.env);
      });

      var exec = replace(target.exec, target.env);
      var args = target.args.map(function (arg) {
        return replace(arg, target.env);
      });
      var cwd = replace(target.cwd, target.env);
      var isWin = process.platform === 'win32';
      var shCmd = isWin ? 'cmd' : '/bin/sh';
      var shCmdArg = isWin ? '/C' : '-c';

      // Store this as we need to re-set it after postBuild
      buildTitle = [target.sh ? shCmd + ' ' + shCmdArg + ' ' + exec : exec].concat(_toConsumableArray(args), ['\n']).join(' ');

      _this4.buildView.setHeading(buildTitle);
      if (target.sh) {
        _this4.child = require('child_process').spawn(shCmd, [shCmdArg, [exec].concat(args).join(' ')], { cwd: cwd, env: env });
      } else {
        _this4.child = require('cross-spawn').spawn(exec, args, { cwd: cwd, env: env });
      }

      var stdout = '';
      var stderr = '';
      _this4.child.stdout.setEncoding('utf8');
      _this4.child.stderr.setEncoding('utf8');
      _this4.child.stdout.on('data', function (d) {
        return stdout += d;
      });
      _this4.child.stderr.on('data', function (d) {
        return stderr += d;
      });
      _this4.child.stdout.pipe(_this4.buildView.terminal);
      _this4.child.stderr.pipe(_this4.buildView.terminal);
      _this4.child.killSignals = (target.killSignals || ['SIGINT', 'SIGTERM', 'SIGKILL']).slice();

      _this4.child.on('error', function (err) {
        _this4.buildView.terminal.write((target.sh ? 'Unable to execute with shell: ' : 'Unable to execute: ') + exec + '\n');

        if (/\s/.test(exec) && !target.sh) {
          _this4.buildView.terminal.write('`cmd` cannot contain space. Use `args` for arguments.\n');
        }

        if ('ENOENT' === err.code) {
          _this4.buildView.terminal.write('Make sure cmd:\'' + exec + '\' and cwd:\'' + cwd + '\' exists and have correct access permissions.\n');
          _this4.buildView.terminal.write('Binaries are found in these folders: ' + process.env.PATH + '\n');
        }
      });

      _this4.child.on('close', function (exitCode) {
        _this4.child = null;
        _this4.errorMatcher.set(target, cwd, stdout + stderr);

        var success = 0 === exitCode;
        if (atom.config.get('build.matchedErrorFailsBuild')) {
          success = success && !_this4.errorMatcher.getMatches().some(function (match) {
            return match.type && match.type.toLowerCase() === 'error';
          });
        }

        _this4.linter && _this4.linter.processMessages(_this4.errorMatcher.getMatches(), cwd);

        if (atom.config.get('build.beepWhenDone')) {
          atom.beep();
        }

        _this4.buildView.setHeading('Running postBuild...');
        return Promise.resolve(target.postBuild ? target.postBuild(success, stdout, stderr) : null).then(function () {
          _this4.buildView.setHeading(buildTitle);

          _this4.busyRegistry && _this4.busyRegistry.end('build.' + target.name, success);
          _this4.buildView.buildFinished(success);
          _this4.statusBarView && _this4.statusBarView.setBuildSuccess(success);
          if (success) {
            require('./google-analytics').sendEvent('build', 'succeeded');
            _this4.finishedTimer = setTimeout(function () {
              _this4.buildView.detach();
            }, 1200);
          } else {
            if (atom.config.get('build.scrollOnError')) {
              _this4.errorMatcher.matchFirst();
            }
            require('./google-analytics').sendEvent('build', 'failed');
          }

          _this4.nextBuild && _this4.nextBuild();
          _this4.nextBuild = null;
        });
      });
    })['catch'](function (err) {
      if (err instanceof BuildError) {
        if (source === 'save') {
          // If there is no eligible build tool, and cause of build was a save, stay quiet.
          return;
        }

        atom.notifications.addWarning(err.name, { detail: err.message, stack: err.stack });
      } else {
        atom.notifications.addError('Failed to build.', { detail: err.message, stack: err.stack });
      }
    });
  },

  sendNextSignal: function sendNextSignal() {
    try {
      var signal = this.child.killSignals.shift();
      require('tree-kill')(this.child.pid, signal);
    } catch (e) {
      /* Something may have happened to the child (e.g. terminated by itself). Ignore this. */
    }
  },

  abort: function abort(cb) {
    var _this5 = this;

    if (!this.child.killed) {
      this.buildView.buildAbortInitiated();
      this.child.killed = true;
      this.child.on('exit', function () {
        _this5.child = null;
        cb && cb();
      });
    }

    this.sendNextSignal();
  },

  build: function build(source, event) {
    var _this6 = this;

    clearTimeout(this.finishedTimer);

    this.doSaveConfirm(this.unsavedTextEditors(), function () {
      var nextBuild = _this6.startNewBuild.bind(_this6, source, event ? event.type : null);
      if (_this6.child) {
        _this6.nextBuild = nextBuild;
        return _this6.abort();
      }
      return nextBuild();
    });
  },

  doSaveConfirm: function doSaveConfirm(modifiedTextEditors, continuecb, cancelcb) {
    var saveAndContinue = function saveAndContinue(save) {
      modifiedTextEditors.forEach(function (textEditor) {
        return save && textEditor.save();
      });
      continuecb();
    };

    if (0 === modifiedTextEditors.length || atom.config.get('build.saveOnBuild')) {
      saveAndContinue(true);
      return;
    }

    if (this.saveConfirmView) {
      this.saveConfirmView.destroy();
    }

    var SaveConfirmView = require('./save-confirm-view');
    this.saveConfirmView = new SaveConfirmView();
    this.saveConfirmView.show(saveAndContinue, cancelcb);
  },

  unsavedTextEditors: function unsavedTextEditors() {
    return atom.workspace.getTextEditors().filter(function (textEditor) {
      return textEditor.isModified() && undefined !== textEditor.getPath();
    });
  },

  stop: function stop() {
    var _this7 = this;

    this.nextBuild = null;
    clearTimeout(this.finishedTimer);
    if (this.child) {
      this.abort(function () {
        _this7.buildView.buildAborted();
        _this7.statusBarView && _this7.statusBarView.buildAborted();
      });
    } else {
      this.buildView.reset();
    }
  },

  consumeLinterRegistry: function consumeLinterRegistry(registry) {
    this.linter && this.linter.destroy();
    var Linter = require('./linter-integration');
    this.linter = new Linter(registry);
  },

  consumeBuilder: function consumeBuilder(builder) {
    var _tools,
        _this8 = this;

    if (Array.isArray(builder)) (_tools = this.tools).push.apply(_tools, _toConsumableArray(builder));else this.tools.push(builder);
    this.targetManager.setTools(this.tools);
    var Disposable = require('atom').Disposable;
    return new Disposable(function () {
      _this8.tools = _this8.tools.filter(Array.isArray(builder) ? function (tool) {
        return builder.indexOf(tool) === -1;
      } : function (tool) {
        return tool !== builder;
      });
      _this8.targetManager.setTools(_this8.tools);
    });
  },

  consumeStatusBar: function consumeStatusBar(statusBar) {
    var _this9 = this;

    var StatusBarView = require('./status-bar-view');
    this.statusBarView = new StatusBarView(statusBar);
    this.statusBarView.onClick(function () {
      return _this9.targetManager.selectActiveTarget();
    });
    this.statusBarView.attach();
  },

  consumeBusy: function consumeBusy(registry) {
    this.busyRegistry = registry;
    this.targetManager.setBusyRegistry(registry);
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,