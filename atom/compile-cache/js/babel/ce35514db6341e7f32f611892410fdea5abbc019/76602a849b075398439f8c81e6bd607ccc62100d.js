Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

'use babel';

var uniquifySettings = function uniquifySettings(settings) {
  var genName = function genName(name, index) {
    return name + ' - ' + index;
  };
  var newSettings = [];
  settings.forEach(function (setting) {
    var i = 0;
    var testName = setting.name;
    while (newSettings.find(function (ns) {
      return ns.name === testName;
    })) {
      // eslint-disable-line no-loop-func
      testName = genName(setting.name, ++i);
    }
    newSettings.push(_extends({}, setting, { name: testName }));
  });
  return newSettings;
};

var activePath = function activePath() {
  var textEditor = atom.workspace.getActiveTextEditor();
  if (!textEditor || !textEditor.getPath()) {
    /* default to building the first one if no editor is active */
    if (0 === atom.project.getPaths().length) {
      return false;
    }

    return atom.project.getPaths()[0];
  }

  /* otherwise, build the one in the root of the active editor */
  return atom.project.getPaths().sort(function (a, b) {
    return b.length - a.length;
  }).find(function (p) {
    try {
      var realpath = _fs2['default'].realpathSync(p);
      return textEditor.getPath().substr(0, realpath.length) === realpath;
    } catch (err) {
      /* Path no longer available. Possible network volume has gone down */
      return false;
    }
  });
};

var getDefaultSettings = function getDefaultSettings(cwd, setting) {
  return Object.assign({}, setting, {
    env: setting.env || {},
    args: setting.args || [],
    cwd: setting.cwd || cwd,
    sh: undefined === setting.sh ? true : setting.sh,
    errorMatch: setting.errorMatch || ''
  });
};

var replace = function replace(value, targetEnv) {
  if (value === undefined) value = '';

  if (!(typeof value === 'string')) {
    return value;
  }

  var env = Object.assign({}, process.env, targetEnv);
  value = value.replace(/\$(\w+)/g, function (match, name) {
    return name in env ? env[name] : match;
  });

  var editor = atom.workspace.getActiveTextEditor();

  var projectPaths = atom.project.getPaths().map(function (projectPath) {
    try {
      return _fs2['default'].realpathSync(projectPath);
    } catch (e) {/* Do nothing. */}
    return null;
  });

  var projectPath = projectPaths[0];
  if (editor && undefined !== editor.getPath()) {
    (function () {
      var activeFile = _fs2['default'].realpathSync(editor.getPath());
      var activeFilePath = _path2['default'].dirname(activeFile);
      projectPath = projectPaths.find(function (p) {
        return activeFilePath && activeFilePath.startsWith(p);
      });
      value = value.replace(/{FILE_ACTIVE}/g, activeFile);
      value = value.replace(/{FILE_ACTIVE_PATH}/g, activeFilePath);
      value = value.replace(/{FILE_ACTIVE_NAME}/g, _path2['default'].basename(activeFile));
      value = value.replace(/{FILE_ACTIVE_NAME_BASE}/g, _path2['default'].basename(activeFile, _path2['default'].extname(activeFile)));
      value = value.replace(/{SELECTION}/g, editor.getSelectedText());
    })();
  }
  value = value.replace(/{PROJECT_PATH}/g, projectPath);
  if (atom.project.getRepositories[0]) {
    value = value.replace(/{REPO_BRANCH_SHORT}/g, atom.project.getRepositories()[0].getShortHead());
  }

  return value;
};

exports.uniquifySettings = uniquifySettings;
exports.activePath = activePath;
exports.getDefaultSettings = getDefaultSettings;
exports.replace = replace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYXBpZXIvRHJvcGJveCAoUGVyc29uYWwpL0Rldi9kb3RmaWxlcy9hdG9tL3BhY2thZ2VzL2J1aWxkL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkFFZSxJQUFJOzs7O29CQUNGLE1BQU07Ozs7QUFIdkIsV0FBVyxDQUFDOztBQUtaLElBQU0sZ0JBQWdCLEdBQUcsU0FBbkIsZ0JBQWdCLENBQUksUUFBUSxFQUFLO0FBQ3JDLE1BQU0sT0FBTyxHQUFHLFNBQVYsT0FBTyxDQUFJLElBQUksRUFBRSxLQUFLO1dBQVEsSUFBSSxXQUFNLEtBQUs7R0FBRSxDQUFDO0FBQ3RELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN2QixVQUFRLENBQUMsT0FBTyxDQUFDLFVBQUEsT0FBTyxFQUFJO0FBQzFCLFFBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNWLFFBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDNUIsV0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTthQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUTtLQUFBLENBQUMsRUFBRTs7QUFDbkQsY0FBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdkM7QUFDRCxlQUFXLENBQUMsSUFBSSxjQUFNLE9BQU8sSUFBRSxJQUFJLEVBQUUsUUFBUSxJQUFHLENBQUM7R0FDbEQsQ0FBQyxDQUFDO0FBQ0gsU0FBTyxXQUFXLENBQUM7Q0FDcEIsQ0FBQzs7QUFFRixJQUFNLFVBQVUsR0FBRyxTQUFiLFVBQVUsR0FBUztBQUN2QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDeEQsTUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRTs7QUFFeEMsUUFBSSxDQUFDLEtBQUssSUFBSSxD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KFBlcnNvbmFsKS9EZXYvZG90ZmlsZXMvYXRvbS9wYWNrYWdlcy9idWlsZC9saWIvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCB1bmlxdWlmeVNldHRpbmdzID0gKHNldHRpbmdzKSA9PiB7XG4gIGNvbnN0IGdlbk5hbWUgPSAobmFtZSwgaW5kZXgpID0+IGAke25hbWV9IC0gJHtpbmRleH1gO1xuICBjb25zdCBuZXdTZXR0aW5ncyA9IFtdO1xuICBzZXR0aW5ncy5mb3JFYWNoKHNldHRpbmcgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgdGVzdE5hbWUgPSBzZXR0aW5nLm5hbWU7XG4gICAgd2hpbGUgKG5ld1NldHRpbmdzLmZpbmQobnMgPT4gbnMubmFtZSA9PT0gdGVzdE5hbWUpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICB0ZXN0TmFtZSA9IGdlbk5hbWUoc2V0dGluZy5uYW1lLCArK2kpO1xuICAgIH1cbiAgICBuZXdTZXR0aW5ncy5wdXNoKHsgLi4uc2V0dGluZywgbmFtZTogdGVzdE5hbWUgfSk7XG4gIH0pO1xuICByZXR1cm4gbmV3U2V0dGluZ3M7XG59O1xuXG5jb25zdCBhY3RpdmVQYXRoID0gKCkgPT4ge1xuICBjb25zdCB0ZXh0RWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpO1xuICBpZiAoIXRleHRFZGl0b3IgfHwgIXRleHRFZGl0b3IuZ2V0UGF0aCgpKSB7XG4gICAgLyogZGVmYXVsdCB0byBidWlsZGluZyB0aGUgZmlyc3Qgb25lIGlmIG5vIGVkaXRvciBpcyBhY3RpdmUgKi9cbiAgICBpZiAoMCA9PT0gYXRvbS5wcm9qZWN0LmdldFBhdGhzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0b20ucHJvamVjdC5nZXRQYXRocygpWzBdO1xuICB9XG5cbiAgLyogb3RoZXJ3aXNlLCBidWlsZCB0aGUgb25lIGluIHRoZSByb290IG9mIHRoZSBhY3RpdmUgZWRpdG9yICovXG4gIHJldHVybiBhdG9tLnByb2plY3QuZ2V0UGF0aHMoKS5zb3J0KChhLCBiKSA9PiAoYi5sZW5ndGggLSBhLmxlbmd0aCkpLmZpbmQocCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlYWxwYXRoID0gZnMucmVhbHBhdGhTeW5jKHApO1xuICAgICAgcmV0dXJuIHRleHRFZGl0b3IuZ2V0UGF0aCgpLnN1YnN0cigwLCByZWFscGF0aC5sZW5ndGgpID09PSByZWFscGF0aDtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8qIFBhdGggbm8gbG9uZ2VyIGF2YWlsYWJsZS4gUG9zc2libGUgbmV0d29yayB2b2x1bWUgaGFzIGdvbmUgZG93biAqL1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBnZXREZWZhdWx0U2V0dGluZ3MgPSAoY3dkLCBzZXR0aW5nKSA9PiB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzZXR0aW5nLCB7XG4gICAgZW52OiBzZXR0aW5nLmVudiB8fCB7fSxcbiAgICBhcmdzOiBzZXR0aW5nLmFyZ3MgfHwgW10sXG4gICAgY3dkOiBzZXR0aW5nLmN3ZCB8fCBjd2QsXG4gICAgc2g6ICh1bmRlZmluZWQgPT09IHNldHRpbmcuc2gpID8gdHJ1ZSA6IHNldHRpbmcuc2gsXG4gICAgZXJyb3JNYXRjaDogc2V0dGluZy5lcnJvck1hdGNoIHx8ICcnXG4gIH0pO1xufTtcblxuY29uc3QgcmVwbGFjZSA9ICh2YWx1ZSA9ICcnLCB0YXJnZXRFbnYpID0+IHtcbiAgaWYgKCEodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBjb25zdCBlbnYgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9jZXNzLmVudiwgdGFyZ2V0RW52KTtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXCQoXFx3KykvZywgZnVuY3Rpb24gKG1hdGNoLCBuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgaW4gZW52ID8gZW52W25hbWVdIDogbWF0Y2g7XG4gIH0pO1xuXG4gIGNvbnN0IGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKTtcblxuICBjb25zdCBwcm9qZWN0UGF0aHMgPSBhdG9tLnByb2plY3QuZ2V0UGF0aHMoKS5tYXAocHJvamVjdFBhdGggPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnMucmVhbHBhdGhTeW5jKHByb2plY3RQYXRoKTtcbiAgICB9IGNhdGNoIChlKSB7IC8qIERvIG5vdGhpbmcuICovIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG5cbiAgbGV0IHByb2plY3RQYXRoID0gcHJvamVjdFBhdGhzWzBdO1xuICBpZiAoZWRpdG9yICYmICh1bmRlZmluZWQgIT09IGVkaXRvci5nZXRQYXRoKCkpKSB7XG4gICAgY29uc3QgYWN0aXZlRmlsZSA9IGZzLnJlYWxwYXRoU3luYyhlZGl0b3IuZ2V0UGF0aCgpKTtcbiAgICBjb25zdCBhY3RpdmVGaWxlUGF0aCA9IHBhdGguZGlybmFtZShhY3RpdmVGaWxlKTtcbiAgICBwcm9qZWN0UGF0aCA9IHByb2plY3RQYXRocy5maW5kKHAgPT4gYWN0aXZlRmlsZVBhdGggJiYgYWN0aXZlRmlsZVBhdGguc3RhcnRzV2l0aChwKSk7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC97RklMRV9BQ1RJVkV9L2csIGFjdGl2ZUZpbGUpO1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgve0ZJTEVfQUNUSVZFX1BBVEh9L2csIGFjdGl2ZUZpbGVQYXRoKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tGSUxFX0FDVElWRV9OQU1FfS9nLCBwYXRoLmJhc2VuYW1lKGFjdGl2ZUZpbGUpKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL3tGSUxFX0FDVElWRV9OQU1FX0JBU0V9L2csIHBhdGguYmFzZW5hbWUoYWN0aXZlRmlsZSwgcGF0aC5leHRuYW1lKGFjdGl2ZUZpbGUpKSk7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC97U0VMRUNUSU9OfS9nLCBlZGl0b3IuZ2V0U2VsZWN0ZWRUZXh0KCkpO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZSgve1BST0pFQ1RfUEFUSH0vZywgcHJvamVjdFBhdGgpO1xuICBpZiAoYXRvbS5wcm9qZWN0LmdldFJlcG9zaXRvcmllc1swXSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgve1JFUE9fQlJBTkNIX1NIT1JUfS9nLCBhdG9tLnByb2plY3QuZ2V0UmVwb3NpdG9yaWVzKClbMF0uZ2V0U2hvcnRIZWFkKCkpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IHsgdW5pcXVpZnlTZXR0aW5ncywgYWN0aXZlUGF0aCwgZ2V0RGVmYXVsdFNldHRpbmdzLCByZXBsYWNlIH07XG4iXX0=