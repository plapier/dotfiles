Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

'use babel';

var uniquifySettings = function uniquifySettings(settings) {
  var genName = function genName(name, index) {
    return name + ' - ' + index;
  };
  var newSettings = [];
  settings.forEach(function (setting) {
    var i = 0;
    var testName = setting.name;
    while (newSettings.find(function (ns) {
      return ns.name === testName;
    })) {
      // eslint-disable-line no-loop-func
      testName = genName(setting.name, ++i);
    }
    newSettings.push(_extends({}, setting, { name: testName }));
  });
  return newSettings;
};

var activePath = function activePath() {
  var textEditor = atom.workspace.getActiveTextEditor();
  if (!textEditor || !textEditor.getPath()) {
    /* default to building the first one if no editor is active */
    if (0 === atom.project.getPaths().length) {
      return false;
    }

    return atom.project.getPaths()[0];
  }

  /* otherwise, build the one in the root of the active editor */
  return atom.project.getPaths().sort(function (a, b) {
    return b.length - a.length;
  }).find(function (p) {
    try {
      var realpath = _fs2['default'].realpathSync(p);
      return _fs2['default'].realpathSync(textEditor.getPath()).substr(0, realpath.length) === realpath;
    } catch (err) {
      /* Path no longer available. Possible network volume has gone down */
      return false;
    }
  });
};

var getDefaultSettings = function getDefaultSettings(cwd, setting) {
  return Object.assign({}, setting, {
    env: setting.env || {},
    args: setting.args || [],
    cwd: setting.cwd || cwd,
    sh: undefined === setting.sh ? true : setting.sh,
    errorMatch: setting.errorMatch || ''
  });
};

var replace = function replace(value, targetEnv) {
  if (value === undefined) value = '';

  if (!(typeof value === 'string')) {
    return value;
  }

  var env = Object.assign({}, process.env, targetEnv);
  value = value.replace(/\$(\w+)/g, function (match, name) {
    return name in env ? env[name] : match;
  });

  var editor = atom.workspace.getActiveTextEditor();

  var projectPaths = atom.project.getPaths().map(function (projectPath) {
    try {
      return _fs2['default'].realpathSync(projectPath);
    } catch (e) {/* Do nothing. */}
    return null;
  });

  var projectPath = projectPaths[0];
  if (editor && undefined !== editor.getPath()) {
    (function () {
      var activeFile = _fs2['default'].realpathSync(editor.getPath());
      var activeFilePath = _path2['default'].dirname(activeFile);
      projectPath = projectPaths.find(function (p) {
        return activeFilePath && activeFilePath.startsWith(p);
      });
      value = value.replace(/{FILE_ACTIVE}/g, activeFile);
      value = value.replace(/{FILE_ACTIVE_PATH}/g, activeFilePath);
      value = value.replace(/{FILE_ACTIVE_NAME}/g, _path2['default'].basename(activeFile));
      value = value.replace(/{FILE_ACTIVE_NAME_BASE}/g, _path2['default'].basename(activeFile, _path2['default'].extname(activeFile)));
      value = value.replace(/{SELECTION}/g, editor.getSelectedText());
      var cursorScreenPosition = editor.getCursorScreenPosition();
      value = value.replace(/{FILE_ACTIVE_CURSOR_ROW}/g, cursorScreenPosition.row + 1);
      value = value.replace(/{FILE_ACTIVE_CURSOR_COLUMN}/g, cursorScreenPosition.column + 1);
    })();
  }
  value = value.replace(/{PROJECT_PATH}/g, projectPath);
  if (atom.project.getRepositories[0]) {
    value = value.replace(/{REPO_BRANCH_SHORT}/g, atom.project.getRepositories()[0].getShortHead());
  }

  return value;
};

exports.uniquifySettings = uniquifySettings;
exports.activePath = activePath;
exports.getDefaultSettings = getDefaultSettings;
exports.replace = replace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,