var _libUtilsJs = require('../lib/utils.js');

'use babel';

describe('utils', function () {
  describe('when uniquifying settings', function () {
    it('should append numbers on equally named settings', function () {
      var settings = [{ name: 'name', cwd: 'cwd1' }, { name: 'name', cwd: 'cwd2' }, { name: 'name', cwd: 'cwd3' }, { name: 'name', cwd: 'cwd4' }];
      expect((0, _libUtilsJs.uniquifySettings)(settings)).toEqual([{ name: 'name', cwd: 'cwd1' }, { name: 'name - 1', cwd: 'cwd2' }, { name: 'name - 2', cwd: 'cwd3' }, { name: 'name - 3', cwd: 'cwd4' }]);
    });

    it('should append numbers on equally named settings, but leave unique names untouched', function () {
      var settings = [{ name: 'name', cwd: 'cwd1' }, { name: 'name', cwd: 'cwd2' }, { name: 'otherName', cwd: 'cwd3' }, { name: 'yetAnotherName', cwd: 'cwd4' }];
      expect((0, _libUtilsJs.uniquifySettings)(settings)).toEqual([{ name: 'name', cwd: 'cwd1' }, { name: 'name - 1', cwd: 'cwd2' }, { name: 'otherName', cwd: 'cwd3' }, { name: 'yetAnotherName', cwd: 'cwd4' }]);
    });
  });

  describe('when getting default settings', function () {
    it('should prioritize specified settings', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', { cmd: 'echo hello', cwd: 'relative' })).toEqual({
        cmd: 'echo hello',
        cwd: 'relative',
        args: [],
        env: {},
        sh: true,
        errorMatch: ''
      });
    });

    it('should be possible to override any argument', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', {
        cmd: 'echo hello',
        cwd: 'relative',
        args: ['arg1'],
        env: { 'key1': 'val1' },
        sh: false,
        errorMatch: '^regex$'
      })).toEqual({
        cmd: 'echo hello',
        cwd: 'relative',
        args: ['arg1'],
        env: { 'key1': 'val1' },
        sh: false,
        errorMatch: '^regex$'
      });
    });

    it('should take the specifed cwd if omitted from settings', function () {
      expect((0, _libUtilsJs.getDefaultSettings)('/cwd', { cmd: 'make' })).toEqual({
        cmd: 'make',
        cwd: '/cwd',
        args: [],
        env: {},
        sh: true,
        errorMatch: ''
      });
    });

    it('should not replace values which are not strings', function () {
      expect((0, _libUtilsJs.replace)(12)).toEqual(12);
      expect((0, _libUtilsJs.replace)({ a: '{FILE_ACTIVE}' })).toEqual({ a: '{FILE_ACTIVE}' });
      expect((0, _libUtilsJs.replace)([1, 2, 3])).toEqual([1, 2, 3]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYXBpZXIvLmF0b20vcGFja2FnZXMvYnVpbGQvc3BlYy91dGlscy1zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIwQkFFOEQsaUJBQWlCOztBQUYvRSxXQUFXLENBQUM7O0FBSVosUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQ3RCLFVBQVEsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0FBQzFDLE1BQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFNO0FBQzFELFVBQU0sUUFBUSxHQUFHLENBQ2YsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDN0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDN0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDN0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FDOUIsQ0FBQztBQUNGLFlBQU0sQ0FBQyxrQ0FBaUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FDekMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDN0IsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDakMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDakMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FDbEMsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxtRkFBbUYsRUFBRSxZQUFNO0FBQzVGLFVBQU0sUUFBUSxHQUFHLENBQ2YsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFDN0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxN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Q0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbGFwaWVyLy5hdG9tL3BhY2thZ2VzL2J1aWxkL3NwZWMvdXRpbHMtc3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgeyB1bmlxdWlmeVNldHRpbmdzLCBnZXREZWZhdWx0U2V0dGluZ3MsIHJlcGxhY2UgfSBmcm9tICcuLi9saWIvdXRpbHMuanMnO1xuXG5kZXNjcmliZSgndXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCd3aGVuIHVuaXF1aWZ5aW5nIHNldHRpbmdzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYXBwZW5kIG51bWJlcnMgb24gZXF1YWxseSBuYW1lZCBzZXR0aW5ncycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNldHRpbmdzID0gW1xuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkMScgfSxcbiAgICAgICAgeyBuYW1lOiAnbmFtZScsIGN3ZDogJ2N3ZDInIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUnLCBjd2Q6ICdjd2QzJyB9LFxuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkNCcgfVxuICAgICAgXTtcbiAgICAgIGV4cGVjdCh1bmlxdWlmeVNldHRpbmdzKHNldHRpbmdzKSkudG9FcXVhbChbXG4gICAgICAgIHsgbmFtZTogJ25hbWUnLCBjd2Q6ICdjd2QxJyB9LFxuICAgICAgICB7IG5hbWU6ICduYW1lIC0gMScsIGN3ZDogJ2N3ZDInIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUgLSAyJywgY3dkOiAnY3dkMycgfSxcbiAgICAgICAgeyBuYW1lOiAnbmFtZSAtIDMnLCBjd2Q6ICdjd2Q0JyB9XG4gICAgICBdKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYXBwZW5kIG51bWJlcnMgb24gZXF1YWxseSBuYW1lZCBzZXR0aW5ncywgYnV0IGxlYXZlIHVuaXF1ZSBuYW1lcyB1bnRvdWNoZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZXR0aW5ncyA9IFtcbiAgICAgICAgeyBuYW1lOiAnbmFtZScsIGN3ZDogJ2N3ZDEnIH0sXG4gICAgICAgIHsgbmFtZTogJ25hbWUnLCBjd2Q6ICdjd2QyJyB9LFxuICAgICAgICB7IG5hbWU6ICdvdGhlck5hbWUnLCBjd2Q6ICdjd2QzJyB9LFxuICAgICAgICB7IG5hbWU6ICd5ZXRBbm90aGVyTmFtZScsIGN3ZDogJ2N3ZDQnIH1cbiAgICAgIF07XG4gICAgICBleHBlY3QodW5pcXVpZnlTZXR0aW5ncyhzZXR0aW5ncykpLnRvRXF1YWwoW1xuICAgICAgICB7IG5hbWU6ICduYW1lJywgY3dkOiAnY3dkMScgfSxcbiAgICAgICAgeyBuYW1lOiAnbmFtZSAtIDEnLCBjd2Q6ICdjd2QyJyB9LFxuICAgICAgICB7IG5hbWU6ICdvdGhlck5hbWUnLCBjd2Q6ICdjd2QzJyB9LFxuICAgICAgICB7IG5hbWU6ICd5ZXRBbm90aGVyTmFtZScsIGN3ZDogJ2N3ZDQnIH1cbiAgICAgIF0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnd2hlbiBnZXR0aW5nIGRlZmF1bHQgc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwcmlvcml0aXplIHNwZWNpZmllZCBzZXR0aW5ncycsICgpID0+IHtcbiAgICAgIGV4cGVjdChnZXREZWZhdWx0U2V0dGluZ3MoJy9jd2QnLCB7IGNtZDogJ2VjaG8gaGVsbG8nLCBjd2Q6ICdyZWxhdGl2ZScgfSkpLnRvRXF1YWwoe1xuICAgICAgICBjbWQ6ICdlY2hvIGhlbGxvJyxcbiAgICAgICAgY3dkOiAncmVsYXRpdmUnLFxuICAgICAgICBhcmdzOiBbXSxcbiAgICAgICAgZW52OiB7fSxcbiAgICAgICAgc2g6IHRydWUsXG4gICAgICAgIGVycm9yTWF0Y2g6ICcnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYmUgcG9zc2libGUgdG8gb3ZlcnJpZGUgYW55IGFyZ3VtZW50JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGdldERlZmF1bHRTZXR0aW5ncygnL2N3ZCcsIHtcbiAgICAgICAgY21kOiAnZWNobyBoZWxsbycsXG4gICAgICAgIGN3ZDogJ3JlbGF0aXZlJyxcbiAgICAgICAgYXJnczogWyAnYXJnMScgXSxcbiAgICAgICAgZW52OiB7ICdrZXkxJzogJ3ZhbDEnIH0sXG4gICAgICAgIHNoOiBmYWxzZSxcbiAgICAgICAgZXJyb3JNYXRjaDogJ15yZWdleCQnXG4gICAgICB9KSkudG9FcXVhbCh7XG4gICAgICAgIGNtZDogJ2VjaG8gaGVsbG8nLFxuICAgICAgICBjd2Q6ICdyZWxhdGl2ZScsXG4gICAgICAgIGFyZ3M6IFsgJ2FyZzEnIF0sXG4gICAgICAgIGVudjogeyAna2V5MSc6ICd2YWwxJyB9LFxuICAgICAgICBzaDogZmFsc2UsXG4gICAgICAgIGVycm9yTWF0Y2g6ICdecmVnZXgkJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRha2UgdGhlIHNwZWNpZmVkIGN3ZCBpZiBvbWl0dGVkIGZyb20gc2V0dGluZ3MnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoZ2V0RGVmYXVsdFNldHRpbmdzKCcvY3dkJywgeyBjbWQ6ICdtYWtlJyB9KSkudG9FcXVhbCh7XG4gICAgICAgIGNtZDogJ21ha2UnLFxuICAgICAgICBjd2Q6ICcvY3dkJyxcbiAgICAgICAgYXJnczogW10sXG4gICAgICAgIGVudjoge30sXG4gICAgICAgIHNoOiB0cnVlLFxuICAgICAgICBlcnJvck1hdGNoOiAnJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCByZXBsYWNlIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmluZ3MnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocmVwbGFjZSgxMikpLnRvRXF1YWwoMTIpO1xuICAgICAgZXhwZWN0KHJlcGxhY2Uoe2E6ICd7RklMRV9BQ1RJVkV9JyB9KSkudG9FcXVhbCh7YTogJ3tGSUxFX0FDVElWRX0nfSk7XG4gICAgICBleHBlY3QocmVwbGFjZShbIDEsIDIsIDMgXSkpLnRvRXF1YWwoWyAxLCAyLCAzIF0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19