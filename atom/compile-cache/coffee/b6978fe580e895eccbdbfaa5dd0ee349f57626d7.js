(function() {
  var helpers;

  helpers = require('./spec-helper');

  describe("the input element", function() {
    var editor, editorElement, exState, getCommandEditor, getVisibility, ref, vimState;
    ref = [], editor = ref[0], editorElement = ref[1], vimState = ref[2], exState = ref[3];
    beforeEach(function() {
      var exMode, vimMode;
      vimMode = atom.packages.loadPackage('vim-mode-plus');
      exMode = atom.packages.loadPackage('ex-mode');
      waitsForPromise(function() {
        var activationPromise;
        activationPromise = exMode.activate();
        helpers.activateExMode();
        return activationPromise;
      });
      runs(function() {
        return spyOn(exMode.mainModule.globalExState, 'setVim').andCallThrough();
      });
      waitsForPromise(function() {
        return vimMode.activate();
      });
      waitsFor(function() {
        return exMode.mainModule.globalExState.setVim.calls.length > 0;
      });
      return runs(function() {
        return helpers.getEditorElement(function(element) {
          atom.commands.dispatch(element, "ex-mode:open");
          editorElement = element;
          editor = editorElement.getModel();
          atom.commands.dispatch(getCommandEditor(), "core:cancel");
          vimState = vimMode.mainModule.getEditorState(editor);
          exState = exMode.mainModule.exStates.get(editor);
          vimState.resetNormalMode();
          return editor.setText("abc\ndef\nabc\ndef");
        });
      });
    });
    afterEach(function() {
      return atom.commands.dispatch(getCommandEditor(), "core:cancel");
    });
    getVisibility = function() {
      return editor.normalModeInputView.panel.visible;
    };
    getCommandEditor = function() {
      return editor.normalModeInputView.editorElement;
    };
    it("opens with 'ex-mode:open'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      return expect(getVisibility()).toBe(true);
    });
    it("closes with 'core:cancel'", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:cancel");
      return expect(getVisibility()).toBe(false);
    });
    it("closes when opening and then pressing backspace", function() {
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      atom.commands.dispatch(getCommandEditor(), "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
    it("doesn't close when there is text and pressing backspace", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      return expect(model.getText()).toBe('ab');
    });
    it("closes when there is text and pressing backspace multiple times", function() {
      var commandEditor, model;
      atom.commands.dispatch(editorElement, "ex-mode:open");
      expect(getVisibility()).toBe(true);
      commandEditor = getCommandEditor();
      model = commandEditor.getModel();
      expect(model.getText()).toBe('');
      model.setText('abc');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('ab');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('a');
      atom.commands.dispatch(commandEditor, "core:backspace");
      expect(getVisibility()).toBe(true);
      expect(model.getText()).toBe('');
      atom.commands.dispatch(commandEditor, "core:backspace");
      return expect(getVisibility()).toBe(false);
    });
    return it("contains '<,'> when opened while there are selections", function() {
      editor.setCursorBufferPosition([0, 0]);
      editor.selectToBufferPosition([0, 1]);
      editor.addCursorAtBufferPosition([2, 0]);
      editor.selectToBufferPosition([2, 1]);
      atom.commands.dispatch(editorElement, "ex-mode:open");
      return expect(getCommandEditor().getModel().getText()).toBe("'<,'>");
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2xhcGllci8uYXRvbS9wYWNrYWdlcy9leC1tb2RlL3NwZWMvZXgtaW5wdXQtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsZUFBUjs7RUFDVixRQUFBLENBQVMsbUJBQVQsRUFBOEIsU0FBQTtBQUM1QixRQUFBO0lBQUEsTUFBNkMsRUFBN0MsRUFBQyxlQUFELEVBQVMsc0JBQVQsRUFBd0IsaUJBQXhCLEVBQWtDO0lBQ2xDLFVBQUEsQ0FBVyxTQUFBO0FBQ1QsVUFBQTtNQUFBLE9BQUEsR0FBVSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQWQsQ0FBMEIsZUFBMUI7TUFDVixNQUFBLEdBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFkLENBQTBCLFNBQTFCO01BQ1QsZUFBQSxDQUFnQixTQUFBO0FBQ2QsWUFBQTtRQUFBLGlCQUFBLEdBQW9CLE1BQU0sQ0FBQyxRQUFQLENBQUE7UUFDcEIsT0FBTyxDQUFDLGNBQVIsQ0FBQTtlQUNBO01BSGMsQ0FBaEI7TUFLQSxJQUFBLENBQUssU0FBQTtlQUNILEtBQUEsQ0FBTSxNQUFNLENBQUMsVUFBVSxDQUFDLGFBQXhCLEVBQXVDLFFBQXZDLENBQWdELENBQUMsY0FBakQsQ0FBQTtNQURHLENBQUw7TUFHQSxlQUFBLENBQWdCLFNBQUE7ZUFDZCxPQUFPLENBQUMsUUFBUixDQUFBO01BRGMsQ0FBaEI7TUFHQSxRQUFBLENBQVMsU0FBQTtlQUNQLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBN0MsR0FBc0Q7TUFEL0MsQ0FBVDthQUdBLElBQUEsQ0FBSyxTQUFBO2VBQ0gsT0FBTyxDQUFDLGdCQUFSLENBQXlCLFNBQUMsT0FBRDtVQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQWQsQ0FBdUIsT0FBdkIsRUFBZ0MsY0FB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QXRFO1dBbUJBLEVBQUEsQ0FBRyx1REFBSCxFQUE0RCxTQUFBO01BQzFELE1BQU0sQ0FBQyx1QkFBUCxDQUErQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQS9CO01BQ0EsTUFBTSxDQUFDLHNCQUFQLENBQThCLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBOUI7TUFDQSxNQUFNLENBQUMseUJBQVAsQ0FBaUMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFqQztNQUNBLE1BQU0sQ0FBQyxzQkFBUCxDQUE4QixDQUFDLENBQUQsRUFBSSxDQUFKLENBQTlCO01BQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFkLENBQXVCLGFBQXZCLEVBQXNDLGNBQXRDO2FBQ0EsTUFBQSxDQUFPLGdCQUFBLENBQUEsQ0FBa0IsQ0FBQyxRQUFuQixDQUFBLENBQTZCLENBQUMsT0FBOUIsQ0FBQSxDQUFQLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsT0FBckQ7SUFOMEQsQ0FBNUQ7RUFwRjRCLENBQTlCO0FBREEiLCJzb3VyY2VzQ29udGVudCI6WyJoZWxwZXJzID0gcmVxdWlyZSAnLi9zcGVjLWhlbHBlcidcbmRlc2NyaWJlIFwidGhlIGlucHV0IGVsZW1lbnRcIiwgLT5cbiAgW2VkaXRvciwgZWRpdG9yRWxlbWVudCwgdmltU3RhdGUsIGV4U3RhdGVdID0gW11cbiAgYmVmb3JlRWFjaCAtPlxuICAgIHZpbU1vZGUgPSBhdG9tLnBhY2thZ2VzLmxvYWRQYWNrYWdlKCd2aW0tbW9kZS1wbHVzJylcbiAgICBleE1vZGUgPSBhdG9tLnBhY2thZ2VzLmxvYWRQYWNrYWdlKCdleC1tb2RlJylcbiAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgIGFjdGl2YXRpb25Qcm9taXNlID0gZXhNb2RlLmFjdGl2YXRlKClcbiAgICAgIGhlbHBlcnMuYWN0aXZhdGVFeE1vZGUoKVxuICAgICAgYWN0aXZhdGlvblByb21pc2VcblxuICAgIHJ1bnMgLT5cbiAgICAgIHNweU9uKGV4TW9kZS5tYWluTW9kdWxlLmdsb2JhbEV4U3RhdGUsICdzZXRWaW0nKS5hbmRDYWxsVGhyb3VnaCgpXG5cbiAgICB3YWl0c0ZvclByb21pc2UgLT5cbiAgICAgIHZpbU1vZGUuYWN0aXZhdGUoKVxuXG4gICAgd2FpdHNGb3IgLT5cbiAgICAgIGV4TW9kZS5tYWluTW9kdWxlLmdsb2JhbEV4U3RhdGUuc2V0VmltLmNhbGxzLmxlbmd0aCA+IDBcblxuICAgIHJ1bnMgLT5cbiAgICAgIGhlbHBlcnMuZ2V0RWRpdG9yRWxlbWVudCAoZWxlbWVudCkgLT5cbiAgICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChlbGVtZW50LCBcImV4LW1vZGU6b3BlblwiKVxuICAgICAgICBlZGl0b3JFbGVtZW50ID0gZWxlbWVudFxuICAgICAgICBlZGl0b3IgPSBlZGl0b3JFbGVtZW50LmdldE1vZGVsKClcbiAgICAgICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChnZXRDb21tYW5kRWRpdG9yKCksIFwiY29yZTpjYW5jZWxcIilcbiAgICAgICAgdmltU3RhdGUgPSB2aW1Nb2RlLm1haW5Nb2R1bGUuZ2V0RWRpdG9yU3RhdGUoZWRpdG9yKVxuICAgICAgICBleFN0YXRlID0gZXhNb2RlLm1haW5Nb2R1bGUuZXhTdGF0ZXMuZ2V0KGVkaXRvcilcbiAgICAgICAgdmltU3RhdGUucmVzZXROb3JtYWxNb2RlKClcbiAgICAgICAgZWRpdG9yLnNldFRleHQoXCJhYmNcXG5kZWZcXG5hYmNcXG5kZWZcIilcblxuICBhZnRlckVhY2ggLT5cbiAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoKGdldENvbW1hbmRFZGl0b3IoKSwgXCJjb3JlOmNhbmNlbFwiKVxuXG4gIGdldFZpc2liaWxpdHkgPSAoKSAtPlxuICAgIGVkaXRvci5ub3JtYWxNb2RlSW5wdXRWaWV3LnBhbmVsLnZpc2libGVcblxuICBnZXRDb21tYW5kRWRpdG9yID0gKCkgLT5cbiAgICBlZGl0b3Iubm9ybWFsTW9kZUlucHV0Vmlldy5lZGl0b3JFbGVtZW50XG5cbiAgaXQgXCJvcGVucyB3aXRoICdleC1tb2RlOm9wZW4nXCIsIC0+XG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChlZGl0b3JFbGVtZW50LCBcImV4LW1vZGU6b3BlblwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuXG4gIGl0IFwiY2xvc2VzIHdpdGggJ2NvcmU6Y2FuY2VsJ1wiLCAtPlxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goZWRpdG9yRWxlbWVudCwgXCJleC1tb2RlOm9wZW5cIilcbiAgICBleHBlY3QoZ2V0VmlzaWJpbGl0eSgpKS50b0JlIHRydWVcbiAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoKGdldENvbW1hbmRFZGl0b3IoKSwgXCJjb3JlOmNhbmNlbFwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgZmFsc2VcblxuICBpdCBcImNsb3NlcyB3aGVuIG9wZW5pbmcgYW5kIHRoZW4gcHJlc3NpbmcgYmFja3NwYWNlXCIsIC0+XG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChlZGl0b3JFbGVtZW50LCBcImV4LW1vZGU6b3BlblwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goZ2V0Q29tbWFuZEVkaXRvcigpLCBcImNvcmU6YmFja3NwYWNlXCIpXG4gICAgZXhwZWN0KGdldFZpc2liaWxpdHkoKSkudG9CZSBmYWxzZVxuXG4gIGl0IFwiZG9lc24ndCBjbG9zZSB3aGVuIHRoZXJlIGlzIHRleHQgYW5kIHByZXNzaW5nIGJhY2tzcGFjZVwiLCAtPlxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goZWRpdG9yRWxlbWVudCwgXCJleC1tb2RlOm9wZW5cIilcbiAgICBleHBlY3QoZ2V0VmlzaWJpbGl0eSgpKS50b0JlIHRydWVcbiAgICBjb21tYW5kRWRpdG9yID0gZ2V0Q29tbWFuZEVkaXRvcigpXG4gICAgbW9kZWwgPSBjb21tYW5kRWRpdG9yLmdldE1vZGVsKClcbiAgICBtb2RlbC5zZXRUZXh0KCdhYmMnKVxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goY29tbWFuZEVkaXRvciwgXCJjb3JlOmJhY2tzcGFjZVwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQmUgJ2FiJ1xuXG4gIGl0IFwiY2xvc2VzIHdoZW4gdGhlcmUgaXMgdGV4dCBhbmQgcHJlc3NpbmcgYmFja3NwYWNlIG11bHRpcGxlIHRpbWVzXCIsIC0+XG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChlZGl0b3JFbGVtZW50LCBcImV4LW1vZGU6b3BlblwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuICAgIGNvbW1hbmRFZGl0b3IgPSBnZXRDb21tYW5kRWRpdG9yKClcbiAgICBtb2RlbCA9IGNvbW1hbmRFZGl0b3IuZ2V0TW9kZWwoKVxuICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQmUgJydcbiAgICBtb2RlbC5zZXRUZXh0KCdhYmMnKVxuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goY29tbWFuZEVkaXRvciwgXCJjb3JlOmJhY2tzcGFjZVwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQmUgJ2FiJ1xuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goY29tbWFuZEVkaXRvciwgXCJjb3JlOmJhY2tzcGFjZVwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgdHJ1ZVxuICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvQmUgJ2EnXG4gICAgYXRvbS5jb21tYW5kcy5kaXNwYXRjaChjb21tYW5kRWRpdG9yLCBcImNvcmU6YmFja3NwYWNlXCIpXG4gICAgZXhwZWN0KGdldFZpc2liaWxpdHkoKSkudG9CZSB0cnVlXG4gICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9CZSAnJ1xuICAgIGF0b20uY29tbWFuZHMuZGlzcGF0Y2goY29tbWFuZEVkaXRvciwgXCJjb3JlOmJhY2tzcGFjZVwiKVxuICAgIGV4cGVjdChnZXRWaXNpYmlsaXR5KCkpLnRvQmUgZmFsc2VcblxuICBpdCBcImNvbnRhaW5zICc8LCc+IHdoZW4gb3BlbmVkIHdoaWxlIHRoZXJlIGFyZSBzZWxlY3Rpb25zXCIsIC0+XG4gICAgZWRpdG9yLnNldEN1cnNvckJ1ZmZlclBvc2l0aW9uKFswLCAwXSlcbiAgICBlZGl0b3Iuc2VsZWN0VG9CdWZmZXJQb3NpdGlvbihbMCwgMV0pXG4gICAgZWRpdG9yLmFkZEN1cnNvckF0QnVmZmVyUG9zaXRpb24oWzIsIDBdKVxuICAgIGVkaXRvci5zZWxlY3RUb0J1ZmZlclBvc2l0aW9uKFsyLCAxXSlcbiAgICBhdG9tLmNvbW1hbmRzLmRpc3BhdGNoKGVkaXRvckVsZW1lbnQsIFwiZXgtbW9kZTpvcGVuXCIpXG4gICAgZXhwZWN0KGdldENvbW1hbmRFZGl0b3IoKS5nZXRNb2RlbCgpLmdldFRleHQoKSkudG9CZSBcIic8LCc+XCJcbiJdfQ==
